//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

// <copyright file="lstb_PersonCTypeFamilienname.cs" company="DATALINE GmbH &amp; Co. KG">
// Copyright (c) DATALINE GmbH &amp; Co. KG. All rights reserved.
// </copyright>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Serialization;

namespace Dataline.Elster.Lohn
{
    namespace LStB201401
    {
        public partial class lstb_PersonCTypeFamilienname : object, System.ComponentModel.INotifyPropertyChanged
        {
            private int GetIndexOf(ItemsChoiceType type)
            {
                var index = ItemsElementName.Select((x, i) => Tuple.Create(x, i)).Where(x => x.Item1 == type).Select(x => x.Item2 + 1).SingleOrDefault() - 1;
                return index;
            }

            [XmlIgnore]
            public string Name
            {
                get
                {
                    var index = GetIndexOf(ItemsChoiceType.Name);
                    if (index == -1)
                        return null;
                    string name = (string)Items[index];
                    return name;
                }
                set
                {
                    var index = GetIndexOf(ItemsChoiceType.Name);
                    if (index == -1)
                    {
                        ItemsElementName = new List<ItemsChoiceType>(ItemsElementName) {
                        ItemsChoiceType.Name,
                    }.ToArray();
                        Items = new List<object>(Items) {
                        value
                    }.ToArray();
                    }
                    else
                    {
                        Items[index] = value;
                    }
                }
            }

            [XmlIgnore]
            public string Vorname
            {
                get
                {
                    var index = GetIndexOf(ItemsChoiceType.Vorname);
                    if (index == -1)
                        return null;
                    string name = (string)Items[index];
                    return name;
                }
                set
                {
                    var index = GetIndexOf(ItemsChoiceType.Vorname);
                    if (index == -1)
                    {
                        ItemsElementName = new List<ItemsChoiceType>(ItemsElementName) {
                        ItemsChoiceType.Vorname,
                    }.ToArray();
                        Items = new List<object>(Items) {
                        value
                    }.ToArray();
                    }
                    else
                    {
                        Items[index] = value;
                    }
                }
            }
        }
    }
}
